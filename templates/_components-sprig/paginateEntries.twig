{# >>> Comp Defaults #}
{% set compDefaults = {
  data: {
    name: 'c-paginateEnries',
    numberOfTabs: null,
  },
  classes: {
    root: 'grid grid-cols-2 md:grid-cols-12 gap-4 md:gap-8 js-observer',
    custom: '',
    tabs: 'col-span-2 md:col-span-12 flex items-center justify-center',
    content: 'col-span-2 md:col-span-12',
  },
} %}

  {# >>> Merge data / classes / variants (optional) #}
{% set props = {
  data: data is defined and data is iterable ? compDefaults.data | merge(data) : compDefaults.data,
  classes: classes is defined and classes is iterable ? compDefaults.classes | merge(classes) : compDefaults.classes,
} %}

{% do sprig.setConfig({ requestClass: 'loading' }) %}

{% set entryQuery = craft.entries
  .id(relatedEntryIds)
  .with(['assetEntryImage']) %}

{% set entries = entryQuery.all() %}

{% set entryId = entryId ??? entries[0].id %}

{# Component #}
<div class="{{ props.data.name }} {{ props.classes.root }} {{ props.classes.custom }}">
  <div class="{{ props.classes.tabs }}">
    {% for item in entries %}
      <button
        sprig
        s-trigger="click"
        s-indicator="#tab-content"
        s-val:entryId="{{ item.id }}"
        onclick="updateURL('{{ item.id }}')"
        class="btn btn--tab {{ item.id == entryId ? 'active' }}"
      >
        {{ item.title }}
      </button>
    {% endfor %}
  </div>

  <div id="tab-content">
    <div class="loading-spinner">
      <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
        <circle cx="4" cy="12" r="3" fill="currentColor">
          <animate id="svgSpinners3DotsBounce0" attributeName="cy" begin="0;svgSpinners3DotsBounce1.end+0.25s" calcMode="spline" dur="0.6s" keySplines=".33,.66,.66,1;.33,0,.66,.33" values="12;6;12"/>
        </circle>
        <circle cx="12" cy="12" r="3" fill="currentColor">
          <animate attributeName="cy" begin="svgSpinners3DotsBounce0.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".33,.66,.66,1;.33,0,.66,.33" values="12;6;12"/>
        </circle>
        <circle cx="20" cy="12" r="3" fill="currentColor">
          <animate id="svgSpinners3DotsBounce1" attributeName="cy" begin="svgSpinners3DotsBounce0.begin+0.2s" calcMode="spline" dur="0.6s" keySplines=".33,.66,.66,1;.33,0,.66,.33" values="12;6;12"/>
        </circle>
      </svg>
    </div>

    {# Tab Content #}
    {% set entryQuery = craft.entries
      .id(entryId)
      .with(['assetEntryImage']) %}

    {% set entry = entryQuery.one() %}
    {# >>> Render page intro #}
    {{ include('_components/pageHead/pageIntroDefault.twig', {
      data: {
        object: entry,
        headline: entry.textCustomSubtitle ??? null,
        text: entry.textEntryDescription ??? null,
      },
      classes: {
        custom: 'js-section py-16 md:py-32'
      }
    }, withContext = false) }}

    {# >>> Render Conent Builder #}
    {{ include('_builders/_builderContent.twig', {
      data: {
        builderContent: entry.builderContent.eagerly() ??? null,
      }
    }, withContext = false) }}
  </div>
</div>

{% js %}
    function updateURL(tabId) {
      const newUrl = window.location.origin + window.location.pathname + '#tab-' + tabId;
      history.pushState(null, null, newUrl); // URL beim Tab-Wechsel aktualisieren, Browserverlauf wird hinzugefügt
    }

    document.addEventListener('DOMContentLoaded', function() {
      const hash = window.location.hash;

      if (hash.startsWith('#tab-')) {
        const tabId = hash.replace('#tab-', '');
        const tabButton = document.querySelector(`button[s-val\\:entryId="${tabId}"]`);
        if (tabButton) {
          tabButton.click(); // Wechsel zum entsprechenden Tab, ohne zu scrollen
        }
      } else {
        // Wenn keine Tab-ID vorhanden ist, setzen wir den ersten Tab und ändern die URL ohne Browserverlauf
        const firstTabButton = document.querySelector('button[s-val\\:entryId]');
        if (firstTabButton) {
          const firstTabId = firstTabButton.getAttribute('s-val:entryId');
          const newUrl = window.location.origin + window.location.pathname + '#tab-' + firstTabId;
          history.replaceState(null, null, newUrl); // URL setzen, ohne den Browserverlauf zu ändern
          firstTabButton.click(); // Ersten Tab gleich aktivieren, ohne zu scrollen
        }
      }
    });

    window.addEventListener('popstate', function() {
      const hash = window.location.hash;
      if (hash.startsWith('#tab-')) {
        const tabId = hash.replace('#tab-', '');
        const tabButton = document.querySelector(`button[s-val\\:entryId="${tabId}"]`);
        if (tabButton) {
          tabButton.click(); // Tab wechseln, ohne zu scrollen
        }
      }
    });
{% endjs %}
